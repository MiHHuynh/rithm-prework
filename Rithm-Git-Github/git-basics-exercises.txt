Basic Git Commands

-Create a folder called learn_git. (Make sure you do this from a folder that isn't a git repository!)

mkdir learn_git

-cd into the learn_git folder.

cd learn_git

-Create a file called first.txt.

touch first.txt

-Initialize an empty git repository.

git init

-Add first.txt to the staging area.

git add first.txt

-Commit with the message "adding first.txt".

git commit -m "adding first.txt"

-Check out your commit with git log.

git log

-Create another file called second.txt.

touch second.txt

-Add second.txt to the staging area.

git add second.txt

-Commit with the message "adding second.txt".

git commit -m "adding second.txt"

-Remove the first.txt file.

rm first.txt

-Add this change to the staging area.

git add .

-Commit with the message "removing first.txt".

git commit -m "removing first.txt"

-Check out your commits using git log.

git log

_____

{ Git Basics Exercises. }

Now that you have learned the basics of Git workflow, try running through this a couple of times on your own:

-Create a folder called learn_git_again.

mkdir learn_git_again

-cd into the learn_git_again folder.

cd learn_git_again

-Create a file called third.txt.

touch third.txt

-Initialize an empty git repository.

git init

-Add third.txt to the staging area.

git add third.txt

-Commit with the message "adding third.txt".

git commit -m "adding third.txt"

-Check out your commit with git log.

git log

-Create another file called fourth.txt.

touch fourth.txt

-Add fourth.txt to the staging area.

git add fourth.txt

-Commit with the message "adding fourth.txt"

git commit -m "adding fourth.txt"

-Remove the third.txt file

rm third.txt

-Add this change to the staging area

git add .

-Commit with the message "removing third.txt"

git commit -m "removing third.txt"

-Check out your commits using git log

git log

-Change your global setting to core.pager=cat - you can read more about that here.

git config --global --replace-all core.pager cat
Solution: git config --global core.pager "cat"

-Write the command to list all of the global configurations for git on your machine.

git config --global -l
Solution: git config --global --list